ext {
    File repoRoot = rootProject.file(".")
    File cppRoot = new File(repoRoot, "rd-cpp")
    File ktRoot = new File(repoRoot, "rd-kt")
    File csRoot = new File(repoRoot, "rd-net")
}

def buildDir = rootProject.buildDir

class GenerateTask extends JavaExec {
    String sourcesRoot
    String sourcesFolder

    GenerateTask() {
        super()
        group = 'generate'
        main = 'com.jetbrains.rd.generator.nova.MainKt'
//        outputs.upToDateWhen { false }
    }

    @Override
    void exec() {
        super.exec()

        def output = systemProperties['model.out.src.cpp.dir'] as String
        if (output != null) {
            project.copy {
                from "$project.cppRoot/PrecompiledHeader.cmake"
                into output
            }
        }
    }

    void lateInit() {
        args "--source=$sourcesRoot/$sourcesFolder", "--hash-folder=${project.rootProject.buildDir}/hash/$sourcesFolder"
    }
}

task generateDemoModel(type: GenerateTask) {
    classpath = sourceSets.main.runtimeClasspath

    sourcesRoot = new File(ktRoot, "rd-gen/src/test/kotlin/com/jetbrains/rd/generator/test/cases/generator")
    sourcesFolder "demo"

    systemProperties = [
            "model.out.src.cpp.dir": "$cppRoot/demo",
            "model.out.src.kt.dir" : "$buildDir/models/demo",
            "model.out.src.cs.dir" : "$csRoot/Test.RdCross/Model"
    ]

    lateInit()
}

task generateInterningTestModel(type: GenerateTask) {
    classpath = sourceSets.main.runtimeClasspath

    sourcesRoot = new File(ktRoot, "rd-gen/src/test/kotlin/com/jetbrains/rd/generator/test/cases/generator")
    sourcesFolder "interning"

    systemProperties = [
            "model.out.src.cpp.dir": "$cppRoot/src/rd_framework_cpp/src/test/util/interning",
            "model.out.src.kt.dir" : "$buildDir/models/interning",
//            "model.out.src.cs.dir" : "$csRoot/"
    ]

    lateInit()
}

task generateCppTestEntities(type: GenerateTask) {
    classpath = sourceSets.main.runtimeClasspath

    sourcesRoot = new File(ktRoot, "rd-gen/src/test/kotlin/com/jetbrains/rd/generator/test/cases/generator")
    sourcesFolder "entities"

    systemProperties = [
            "model.out.src.cpp.dir": "$cppRoot/src/rd_framework_cpp/src/test/util/entities",
    ]

    lateInit()
}

task generateEverything {
    group = 'generate'
    description = 'Generates protocol models.'
    dependsOn generateDemoModel, generateInterningTestModel, generateCppTestEntities
}