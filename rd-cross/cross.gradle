import com.jetbrains.rd.gradle.tasks.CrossTestKtTask
import com.jetbrains.rd.gradle.tasks.InteropTask

dependencies {
//    testCompileOnly files { project(':rd-framework:').sourceSets.test.kotlin.srcDirs }
//    compile project(':rd-framework:').sourceSets.test.output
    compile project(':rd-kt:rd-framework:')
    implementation gradleApi()
}

def getCppTaskByName(String name) {
    return project(':rd-cpp').getTasksByName(name, true).iterator().next()
}

def getCsTaskByName(String name) {
    return project(':rd-net').getTasksByName(name, true).iterator().next()
}

//region Kt
task CrossTestKtServerAllEntities(type: CrossTestKtTask, dependsOn: tasks.getByPath(':rd-kt:rd-framework:jvmTestClasses')) {
    classpath += project.sourceSets.test.runtimeClasspath
    classpath += project.sourceSets.test.compileClasspath
}

task CrossTestKtServerBigBuffer(type: CrossTestKtTask, dependsOn: tasks.getByPath(':rd-kt:rd-framework:jvmTestClasses')) {
    classpath += project.sourceSets.test.runtimeClasspath
    classpath += project.sourceSets.test.compileClasspath
}
//endregion

//region KtCpp
task CrossTestKtCppAllEntities(type: InteropTask) {
    taskServer = CrossTestKtServerAllEntities
    taskClient = getCppTaskByName('CrossTestCppClientAllEntities')

    addDependencies()
}

task CrossTestKtCppBigBuffer(type: InteropTask) {
    taskServer = CrossTestKtServerBigBuffer
    taskClient = getCppTaskByName('CrossTestCppClientBigBuffer')

    addDependencies()
}
//endregion

//region KtCs
task CrossTestKtCsAllEntities(type: InteropTask) {
    taskServer = CrossTestKtServerAllEntities
    taskClient = getCsTaskByName('CrossTestCsClientAllEntities')

    addDependencies()
}

task CrossTestKtCsBigBuffer(type: InteropTask) {
    taskServer = CrossTestKtServerBigBuffer
    taskClient = getCsTaskByName('CrossTestCsClientBigBuffer')

    addDependencies()
}
//endregion

task crossTest() {
    dependsOn 'CrossTestKtCppAllEntities', 'CrossTestKtCppBigBuffer', 'CrossTestKtCsAllEntities'//, 'CrossTestKtCsBigBuffer'
}